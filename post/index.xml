<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on HzChris</title>
    <link>https://blog.hzchris.space/post/</link>
    <description>Recent content in Posts on HzChris</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <copyright>Copyright © 2023 by HzChris</copyright>
    <lastBuildDate>Fri, 05 Apr 2019 21:23:09 +0800</lastBuildDate><atom:link href="https://blog.hzchris.space/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>完成: 把不了了之的待辦目標變成以實現的有效練習 - 讀後心得</title>
      <link>https://blog.hzchris.space/post/review-of-finish-give-yourself-the-gift-of-done/</link>
      <pubDate>Fri, 05 Apr 2019 21:23:09 +0800</pubDate>
      
      <guid>https://blog.hzchris.space/post/review-of-finish-give-yourself-the-gift-of-done/</guid>
      <description>這本書很適合介紹給常常訂定了很多新目標，也開始了很多新目標，但卻都沒有完成的人看；就如同每個人在新年時往往都會訂立很多新一年要想要達成的目標，但 10 個通常有 9 個不會達成(也可能 10 個都沒達成)。
不過也不用氣餒，根據書中統計，92% 的人立下的新年新希望最後都會失敗。
爲什麼完成事情這麼難? 很多書都告訴你，不管目標大、多難以達成，趕快開始就對了。只要起了頭，目標就不會像原本看起來的這麼難以達成。不能說沒有道理，沒有開始、就不會有結果，對吧？
所以，只要我們開始了，事情就會一帆風順，不努力、不堅持、滑滑手機，時間到了自然就會達成？顯然不是，最困難的地方往往是在開始之後；很多人每年都會希望減重，所以就會開始計畫跑步，還為了重訓去辦了健身房的會員，但是跑了一個月之後可能就因爲工作忙、懶惰等等因素不跑了（對我就是在說我自己），而且說也奇怪，只要有一兩次跳過既定的跑步計劃後，下一次到了跑步時間，就會動力全無，再也不想跑了。
爲什麼會這樣？書中告訴我們，那是心中的完美主義在作祟，只要原定的計劃漏了一天，整個計劃的執行看起來就不是那麼「完美」，這樣的「不完美」是完美主義者所不能忍受的，所以只好放著不執行，只要事情沒有真的被完成，就不會是真的「不完美」。只要一天，之前的所有努力就會前功盡棄。
可是我沒有完美主義啊？ 在閱讀之前，我並不會認爲自己是所謂的完美主義者，但在理解書中觀點之後，會發現其實每個人都多少會有這樣子的傾向：訂好的減重計劃，因爲一次預訂的時間沒有上健身房，就全盤放棄；好不容易開始記錄任務清單，但只要其中一項沒有做完打勾，隔天就懶得紀錄了，好像這樣的中斷對你的目標產生了毀滅性的災難一樣。
你我都知道，一年有 365 天，漏了一天並不會對目標有那麼巨大的影響， 真正讓失敗的原因是：你放棄了這個目標，因為它在執行上已經不完美了。
接受不完美 跳過一次的重訓、少完成一項清單並不會帶來世界末日，也不需要花很多錢來讓自己回到正軌，你要做的，只是忍受這一點不適（雖然這很難），然後繼續朝目標前進即可。就像前面說的，一年有 365 天，少一天並不會對讓你的目標無法完成，只要其他日子夠繼續前進，這一天沒什麼大不了的。
目標減半 如果在執行時，發現目標太大，可以將目標減半；原本預計要減肥減十公斤，可以改成五公斤；想要戒掉飲料，可以先從喝無糖的開始。
怎麼樣的目標才算太大呢？根據研究，人的天性很容易將目標訂的太樂觀，且樂觀到愚蠢的程度，像是沒跑過半馬的人，會認爲自己在短時間可以訓練到足以跑全馬的程度，科學家稱此爲「規劃謬誤」(planning fallacy)；所以不要相信自己一開始訂的目標會是合理的，放心的把它砍半吧。
要有所得，先學會捨 還有，時間是有限的，並不是所有立下的目標都有機會被執行；選擇某項目標的同時，也必須捨棄掉一些原本在做的事情。假如你將每週健身三次做爲目標，那就會減少與朋友、女友的相處時間（當然，最理想的情況是能交到有共同目標的（女）朋友），也會減少滑 FB、看 Netflix 的時間。
雖然很想說：「我全都要！」，但其實你很清楚知道自己沒辦法完成所有事情，與其試圖做超過能力所能負擔的事情並失敗，不如在事情開始之前，決定要要捨棄哪些部分，並集中火力，好好完成自己認爲最重要的目標。
找出目標的樂趣 當達成目標的過程太痛苦時，可以思考該如何讓這個過程變得有趣。舉例來說，天天跑步很無聊怎麼辦？那就可以思考什麼樣的動機可以讓你想要天天跑步。也許是在 Nike 的慢跑 App 中超過其他對手、拿到更多獎章。又或許是你加入了一個正妹的慢跑社團，慢跑可以讓你認識更多妹子新朋友&amp;hellip;等等。
看了這本書，對我有什麼影響？ 以我自己爲例，我可能同時有數件想要做的事情，像是分享讀到的書、學習數據分析、做自己的 side project 等等。而我首先要做的，就是將這些想做的事都列出，分別標上我最終想達到的成果；以分享讀到的書來說，我的目標是想寫一篇完整的 Blog 介紹此書，但是我可以降低目標，先大概寫一小段內容就發佈，之後再逐步用更多的小目標來完善文章，所以如果你看到這段，這可能就是我第 n 次的修改版本。
而在採取這種做法的同時，我必須要：
忍受不完美：讓自己覺得不夠完整的文章被發佈 捨棄其他目標：少追了幾集影集、side project 被閒置 但我得到了：
因爲接受不完美，所以在撰寫的時候不會有壓力 真正完成並發佈一篇文章，分享的樂趣 最後 我覺得書中有一句話很有道理，適合當做文章的結尾
多數人花了大半輩子想像與做夢。
開始做很有趣，但未來是屬於完成者的。</description>
    </item>
    
    <item>
      <title>CiricleCI Workflow: 讓 build 時間減少 50% 的設定心得</title>
      <link>https://blog.hzchris.space/post/boost-ci-build-with-circleci-workflow/</link>
      <pubDate>Sat, 16 Jun 2018 11:43:14 +0800</pubDate>
      
      <guid>https://blog.hzchris.space/post/boost-ci-build-with-circleci-workflow/</guid>
      <description>財報狗用 CircleCI 有一段時間了，一開始用的時候還是 1.0， 2.0 還在 beta 階段。我們的專案在 1.0 上面一直運作良好，所以也沒有想說要換，直到 CircleCI 發佈 2018/8/31 之後將不再支援 1.0，我們才開始考慮要遷移專案 XD，順便趁着這次 的遷移導入的 2.0 的新功能: workflow。
Workflow 簡介 CircleCI 在 2.0 中推出了 workflow 這個新功能，官網的介紹如下：
A workflow is a set of rules for defining a collection of jobs and their run order. Workflows support complex job orchestration using a simple set of configuration keys to help you resolve failures sooner.
簡單來說，workflow 提供了一種做法，讓你可以把 CI 的每個步驟拆分成一個個獨立的 jobs，jobs 之間遵照一定的執行順序或是並行，萬一發生失敗，只要針對失敗的 job 去做處理就好了，大大提升反應速度。</description>
    </item>
    
    <item>
      <title>讓自訂網域的 Github Page 支援 HTTPS</title>
      <link>https://blog.hzchris.space/post/get-https-support-on-github-page-with-custom-domain/</link>
      <pubDate>Sat, 09 Jun 2018 12:13:25 +0800</pubDate>
      
      <guid>https://blog.hzchris.space/post/get-https-support-on-github-page-with-custom-domain/</guid>
      <description>之前都是用 Gitlab + Let&amp;rsquo;s Encrypt 的方式來讓 blog 有綠色的鎖頭，不過 Let&amp;rsquo;s Encrypt 每 90 天就要更新一次，有時候會因爲偷懶沒更新導致憑證過期XD，很不方便。
直到不久前看到 Github Page 也開始支援自訂網域的 Https ，就花了點時間把部落格從 Gitlab 遷移到 Github 了。
設定步驟 首先，到網域供應商那邊(我的是gandi) 把 CNAME 對應到個人的 github 頂層網域，我的 github 帳號是 hzchirs，所以頂層網域就是 hzchirs.github.io，而我希望把子網域 blog.hzchris.space 對應到 Github Page，所以設定會像這樣：
注意: Hostname 欄位的 username.github.io. 最後面有個點，不要漏掉了。
當設定完成之後，要數小時至一天才會生效，如果想要確定是否生效，可以使用 dig 來查詢，生效的自訂網域與 github.io 都應該指向同一個 IP：
$ dig blog.hzchris.space +noall +answer sni.github.map.fastly.net. 735	IN	A	185.199.111.153 sni.github.map.fastly.net. 735	IN	A	185.199.110.153 sni.github.map.fastly.net. 735	IN	A	185.199.109.153 sni.github.map.fastly.net. 735	IN	A	185.</description>
    </item>
    
    <item>
      <title>如何在 PostgreSQL 中找出連續日期</title>
      <link>https://blog.hzchris.space/post/how-to-find-consecutive-dates-in-postgresql/</link>
      <pubDate>Sat, 12 May 2018 22:07:56 +0800</pubDate>
      
      <guid>https://blog.hzchris.space/post/how-to-find-consecutive-dates-in-postgresql/</guid>
      <description>&lt;p&gt;工作上需要從資料庫找出使用者連續上站天數，
找了一些相關的資源，其實解法相當多，但大多都是 SQL Server 的解法，
從中找了一個比較[簡單優雅的]
(&lt;a href=&#34;https://stackoverflow.com/questions/20402089/detect-consecutive-dates-ranges-using-sql&#34;&gt;https://stackoverflow.com/questions/20402089/detect-consecutive-dates-ranges-using-sql&lt;/a&gt;)
來研究，並修改成 &lt;a href=&#34;http://www.sqlfiddle.com/#!17/3e264/24/0&#34;&gt;PostgreSQL 的版本&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在接下來的說明中，會產生一個最簡單，單純只有時間序列的 table，並用這個 table 來
一步步說明實現方式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HHKB layout 的客制鍵盤 &#43; Maxkey 灰階 &#43; XDA 球帽開箱</title>
      <link>https://blog.hzchris.space/post/unboxing-hhkb-layout-xd60-with-maxkey-ashen-and-xda-pbt-the-max/</link>
      <pubDate>Sat, 18 Nov 2017 09:20:36 +0800</pubDate>
      
      <guid>https://blog.hzchris.space/post/unboxing-hhkb-layout-xd60-with-maxkey-ashen-and-xda-pbt-the-max/</guid>
      <description>&lt;p&gt;一直想要組一個跟 HHKB 一樣配置的機械鍵盤放在公司，除了再買一隻 HHKB 之外，
似乎就只有客製化一途；剛好在 Facebook 看到機械鍵盤愛好者的社團有在幫忙組客製化鍵盤，
在做了一些詢問之後就下訂了，後來才知道社團版主是鍵鼠版名人貝瑞大。
原本預計要 11 月底左右才拿得到，結果沒想到上禮拜就好了，真是意外的驚喜。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>淺談Ruby的參數傳遞</title>
      <link>https://blog.hzchris.space/post/%E6%B7%BA%E8%AB%87ruby%E7%9A%84%E5%8F%83%E6%95%B8%E5%82%B3%E9%81%9E/</link>
      <pubDate>Wed, 30 Aug 2017 12:36:52 +0800</pubDate>
      
      <guid>https://blog.hzchris.space/post/%E6%B7%BA%E8%AB%87ruby%E7%9A%84%E5%8F%83%E6%95%B8%E5%82%B3%E9%81%9E/</guid>
      <description>&lt;p&gt;以前學計概的時候，知道參數傳遞有分為幾種方式，分別為 &lt;code&gt;call by value&lt;/code&gt;，&lt;code&gt;call by reference&lt;/code&gt;，以及 &lt;code&gt;call by address&lt;/code&gt;
(其實原本的說法裡沒有&lt;code&gt;call by address&lt;/code&gt;，詳情後述)&lt;/p&gt;
&lt;p&gt;那麼，在 Ruby 中，參數是以什麼方式去進行傳遞的呢？
通常 Google 之後就會發現，Ruby 是 &lt;code&gt;call by value&lt;/code&gt; 的，但是這個 &lt;code&gt;call by value&lt;/code&gt; 跟以往所認知的 &lt;code&gt;call by value&lt;/code&gt; 又不太ㄧ樣，
讓我們來做個實驗：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>用 Gitlab Pages 取代 Github Pages 建立靜態網站</title>
      <link>https://blog.hzchris.space/post/use-gitlab-pages-instead-of-github-pages/</link>
      <pubDate>Wed, 26 Jul 2017 09:44:54 +0800</pubDate>
      
      <guid>https://blog.hzchris.space/post/use-gitlab-pages-instead-of-github-pages/</guid>
      <description>&lt;p&gt;前幾天發現 Github Page  自訂 domain 無法支援 SSL 之後，就開始在尋找替代的解法。
後來發現 Gitlab 也推出了 Gitlab Pages，在設定上跟 Github 相當類似，幾乎可以無痛轉移，而且還有一些Github 沒有的優勢：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rails 專案重構之 Query Object Pattern</title>
      <link>https://blog.hzchris.space/post/rails-query-object-pattern/</link>
      <pubDate>Thu, 22 Jun 2017 11:58:09 +0800</pubDate>
      
      <guid>https://blog.hzchris.space/post/rails-query-object-pattern/</guid>
      <description>&lt;p&gt;在 Rails 專案中，資料查詢是幾乎不可避免的事情，幸好 Rails 裡有 ActiveRecord 可以幫助我們少寫許多的 SQL，
讓程式碼看起來更簡潔易讀，如果是常用的查詢也可以抽成 scope。
但隨著專案成長，對於資料查詢的需求通常會愈來愈大，query 的邏輯也愈趨複雜，此時會發現 controller 跟 model 漸漸充斥著雜亂的 query。&lt;/p&gt;
&lt;p&gt;舉個簡單的例子來說明：假如今天在 controller 發現這樣的 code:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rails: 不安全的 migration</title>
      <link>https://blog.hzchris.space/post/rails-dangerous-migration/</link>
      <pubDate>Sat, 10 Dec 2016 11:58:09 +0800</pubDate>
      
      <guid>https://blog.hzchris.space/post/rails-dangerous-migration/</guid>
      <description>&lt;p&gt;在 Rails 建立 migration 是一個很常見的行為，但是魔鬼藏在細節裡，悲劇往往就是在認為一切都理所當然的時候發生。&lt;/p&gt;
&lt;p&gt;想像一個情境：
目前有一個由 Rails5 ActionCable 開發的聊天室，運作良好，有數百萬筆訊息存在 Message 這個 model。有天老闆心血來潮，要你幫這個聊天室加上『已讀』功能，你會怎麼做？&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
